# torchtitan Config.toml

[job]
dump_folder = "./outputs"
description = "Code Llama 3 pretrained embeddings training"
use_for_integration_test = true

[profiling]
enable_profiling = false
save_traces_folder = "profile_trace"
profile_freq = 10
enable_memory_snapshot = false
save_memory_snapshot_folder = "memory_snapshot"

[metrics]
log_freq = 10
enable_color_printing = true
enable_tensorboard = true
save_tb_folder = "tb"

[model]
name = "llama3_pretrained"
flavor = "debugmodel"
norm_type = "rmsnorm"  # layernorm / np_layernorm / rmsnorm / compiled_rmsnorm / fused_rmsnorm
tokenizer_path = "./test/assets/tokenizer.model"
pretrained_embedding_path = "./test/assets/llama3_8b_pretrained_embedding.npy"

[optimizer]
name = "AdamW"
lr = 5e-4

[training]
batch_size = 16
seq_len = 512
warmup_steps = 1_000  # lr scheduler warm up, normally 20% of the train steps
max_norm = 1.0  # grad norm clipping
steps = 5_000
data_parallel_degree = -1
tensor_parallel_degree = 1
compile = false
dataset = "tiny_stories"  # supported datasets: c4_test (2K), c4 (177M)

[experimental]
pipeline_parallel_degree = 1
enable_async_tensor_parallel = false

[checkpoint]
enable_checkpoint = true
folder = "checkpoint_pretrained"
interval_type = "steps"
interval = 1_000
model_weights_only = true
export_dtype = "bfloat16"
async_mode = "disabled"  # ["disabled", "async", "async_with_pinned_mem"]

[activation_checkpoint]
mode = 'full'  # ['none', 'selective', 'full']
selective_ac_option = '2'  # 'int' = ac every positive int layer or 'op', ac based on ops policy

[float8]
enable_float8_linear = false
